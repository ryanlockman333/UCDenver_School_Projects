/*
 *socket.cpp Class Implementations
*/

// Headers
#include <cstring>
#include <string>
#include <cerrno>
#include <fcntl.h> 
#include "socket.h"

// Constructors
Socket::Socket() : sockfd(-1) {
    memset(&sock_addr, 0, sizeof sock_addr);
}

Socket::~Socket() {
    if(is_valid())
        ::close(sockfd);
}

// Server Init
bool Socket::create() {
    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    if(!is_valid())
        return false;
    

    // Time Wait
    int on = 1;
    if(setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const char*)&on, sizeof on) == -1)
        return false;

    return true;
}

bool Socket::bind(const int port) {
    if(!is_valid())
        return false;

    sock_addr.sin_family      = AF_INET;
    sock_addr.sin_addr.s_addr = INADDR_ANY;
    sock_addr.sin_port        = htons(port);

    int bind_return = ::bind(sockfd, (struct sockaddr*)&sock_addr, sizeof sock_addr);


    if(bind_return == -1)
        return false;

    return true;
}

bool Socket::listen() const {
    if(!is_valid())
        return false;

    int listen_return = ::listen(sockfd, MAXCONNECTIONS);


    if(listen_return == -1)
        return false;

    return true;
}

bool Socket::accept(Socket &new_socket) const {
    int addr_length   = sizeof sock_addr;
    new_socket.sockfd = ::accept(sockfd, (sockaddr*)&sock_addr, (socklen_t*)&addr_length);

    if(new_socket.sockfd <= 0)
        return false;
    else
        return true;
}

// Client Init
bool Socket::connect(const std::string host, const int port) {
    if(!is_valid())
        return false;

    sock_addr.sin_family = AF_INET;
    sock_addr.sin_port   = htons(port);

    int status = inet_pton(AF_INET, host.c_str(), &sock_addr.sin_addr);

    if(errno == EAFNOSUPPORT)
        return false;

    status = ::connect(sockfd, (sockaddr*)&sock_addr, sizeof sock_addr);

    if(status == 0)
        return true;
    else
        return false;
}

// Data Trans
bool Socket::send(const std::string str) const {
    int status = ::send(sockfd, str.c_str(), str.size(), MSG_NOSIGNAL);
    
    if(status == -1)
        return false;
    else
        return true;
}

int Socket::recv(std::string &str) const {
    char buf[MAXRECV+1];

    memset(buf, 0, MAXRECV+1);

    int status = ::recv(sockfd, buf, MAXRECV, 0);

    if(status == -1) {
        std::cout << "\nstatus == -1   errno == " << errno << "  in Socket::recv\n";
        return 0;
    }
    else if(status == 0)
        return 0;
    else {
        str = buf;
        return status;
    }
}

// Other Member Funtions
void Socket::set_noBlock(const bool b) {
    int opts = 0;

    opts = fcntl(sockfd, F_GETFL);

    if(opts < 0)
        return;

    if(b)
        opts = (opts | O_NONBLOCK);
    else
        opts = (opts & ~O_NONBLOCK);

    fcntl(sockfd, F_SETFL, opts);
}

